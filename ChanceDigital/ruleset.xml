<?xml version="1.0"?>
<ruleset name="ChanceDigital">
	<description>Sniffs for the coding standards of the WP-API plugin</description>

	<!-- vendor/chancedigital/wp-coding-standards, -->
	<config name="installed_paths" value="vendor/wp-coding-standards/wpcs,vendor/fig-r/psr2r-sniffer" />

	<exclude-pattern>vendor/*</exclude-pattern>
	<exclude-pattern>dist/*</exclude-pattern>
	<exclude-pattern>node_modules/*</exclude-pattern>
	<exclude-pattern>*.js</exclude-pattern>
	<exclude-pattern>*.css</exclude-pattern>

	<autoload>./bootstrap.php</autoload>

	<!-- Include everything in the Extra standard, with exclusions -->
	<rule ref="WordPress-Extra">
		<exclude name="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma" />
		<exclude name="Squiz.PHP.EmbeddedPhp.NoSemicolon" />
		<exclude name="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned" />
		<exclude name="WordPress.PHP.YodaConditions" />
		<exclude name="WordPress.WP.EnqueuedResourceParameters.MissingVersion" />
	</rule>

	<!-- Allow the use of filesystem functions -->
	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" value="file_get_contents,file_system_read" />
		</properties>
	</rule>

	<!-- Allow . in hook names -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="."/>
		</properties>
	</rule>

	<!-- Prefer alignment over line length -->
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="maxColumn" value="1000"/>
		</properties>
	</rule>

	<!--
	ChanceDigital Rules
	Starting from Human Made standards: http://engineering.hmn.md/style/php/
	-->

	<!-- File Layout: Classes in own file. -->
		<!-- Handled in Classes/OnlyClassInFileSniff -->
		<!-- Also handled in PSR1.Classes.ClassDeclaration below. -->

	<!-- File Layout: Order: `namespace`, `use`, `const`, code -->
		<!-- Handled in Layout/OrderSniff -->

	<!-- File Naming: `name/space/` -->
		<!-- Handled in Files/NamespaceDirectoryNameSniff -->

	<!-- File Naming: `class-classname.php` -->
		<!-- Handled in Files/ClassNameFileSniff -->

	<!-- File Naming: `namespace.php` -->
		<!-- Handled in Files/FunctionFileNameSniff -->

	<!-- File Naming: `plugin.php` or `functions.php` -->

	<!-- Namespacing: Required for classes -->
		<rule ref="PSR1.Classes.ClassDeclaration" />

	<!-- Namespacing: Required for functions -->
		<!-- Handled in Functions/NamespacedFunctionsSniff -->
		<rule ref="PSR2.Namespaces.NamespaceDeclaration" />

	<!-- Namespacing: `use` statements -->
		<rule ref="PSR2.Namespaces.UseDeclaration" />
		<rule ref="PSR2R.Namespaces.UnusedUseStatement" />
		<rule ref="PSR2R.Namespaces.UseInAlphabeticalOrder" />

	<!-- Namespacing: No backslash with `use` -->
		<!-- Handled in Namespaces/NoLeadingSlashOnUseSniff -->

	<!-- Ban inline assignment in control structures. -->
		<rule ref="PSR2R.ControlStructures.NoInlineAssignment" />

	<!-- Anonymous Functions: Spaces after `function` and `use` -->
		<!-- Handled in Squiz.Functions.MultiLineFunctionDeclaration -->

	<!-- Array Creation: Short Syntax -->
		<!-- Handled in Arrays/ForceShortArraysSniff -->

	<!-- TEMPLATE RULES / TEMPLATES RULE -->
	<!-- Namespacing: No namespace -->

	<!-- Inline Statements: Single statement on same line -->
		<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<!-- Inline Statements: No semicolons -->

	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
</ruleset>
